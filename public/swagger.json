{
  "swagger": "2.0",
  "info": {
    "contact": {
      "email": "marius.klocke@gmail.com",
      "name": "Marius Klocke"
    },
    "description": "RESTful API for managing Wilde Liga Bremen",
    "title": "Wilde Liga Bremen API",
    "version": "0.7"
  },
  "basePath": "/api",
  "paths": {
    "/matches": {
      "get": {
        "operationId": "getMatches",
        "parameters": [
          {
            "in": "query",
            "name": "season_id",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "tournament_id",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "team_id",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "match_day_id",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Array of matches",
            "schema": {
              "items": {
                "$ref": "#/definitions/match"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "match"
        ],
        "summary": "Find matches by multiple filter criteria"
      }
    },
    "/matches/{id}": {
      "get": {
        "operationId": "getMatch",
        "parameters": [
          {
            "description": "match id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Contains a single match object",
            "schema": {
              "$ref": "#/definitions/match"
            }
          },
          "404": {
            "description": "Match could not be found"
          }
        },
        "tags": [
          "match"
        ],
        "summary": "Find a single match by id"
      }
    },
    "/matches/{id}/cancellation": {
      "post": {
        "operationId": "cancelMatch",
        "security": [
          {"JWT": []},
          {"basic-auth": []}
        ],
        "parameters": [
          {
            "description": "match id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "cancelMatchBody",
            "schema": {
              "properties": {
                "reason": {
                  "type": "string",
                  "maxLength": 255
                }
              },
              "required": [
                "reason"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation successful"
          }
        },
        "tags": [
          "match"
        ],
        "summary": "Cancel a match"
      }
    },
    "/matches/{id}/kickoff": {
      "post": {
        "operationId": "scheduleMatch",
        "security": [
          {"JWT": []},
          {"basic-auth": []}
        ],
        "parameters": [
          {
            "description": "match id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "scheduleMatchBody",
            "schema": {
              "properties": {
                "kickoff": {
                  "format": "date-time",
                  "type": "string"
                }
              },
              "required": [
                "kickoff"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation successful"
          }
        },
        "tags": [
          "match"
        ],
        "summary": "Schedule a match"
      }
    },
    "/matches/{id}/location": {
      "post": {
        "operationId": "locateMatch",
        "security": [
          {"JWT": []},
          {"basic-auth": []}
        ],
        "parameters": [
          {
            "description": "match id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "locateMatchBody",
            "schema": {
              "properties": {
                "pitch_id": {
                  "type": "string"
                }
              },
              "required": [
                "pitch_id"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation successful"
          }
        },
        "tags": [
          "match"
        ],
        "summary": "Locate a match on a pitch"
      }
    },
    "/matches/{id}/result": {
      "post": {
        "operationId": "submitMatchResult",
        "security": [
          {"JWT": []},
          {"basic-auth": []}
        ],
        "parameters": [
          {
            "description": "match id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "submitMatchResultBody",
            "schema": {
              "properties": {
                "guest_score": {
                  "type": "integer",
                  "minimum": 0,
                  "maximum": 99
                },
                "home_score": {
                  "type": "integer",
                  "minimum": 0,
                  "maximum": 99
                }
              },
              "required": [
                "home_score",
                "guest_score"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation successful"
          },
          "403": {
            "description": "User is not authorized to perform this operation"
          }
        },
        "tags": [
          "match"
        ],
        "summary": "Submit a matches result"
      }
    },
    "/match_days/{id}": {
      "patch": {
        "operationId": "rescheduleMatchDay",
        "security": [
          {"JWT": []},
          {"basic-auth": []}
        ],
        "parameters": [
          {
            "description": "matchday id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "scheduleMatchDayBody",
            "schema": {
              "type": "object",
              "properties": {
                "date_period": {
                  "$ref": "#/definitions/date_period"
                }
              },
              "required": ["date_period"]
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation successful"
          }
        },
        "tags": [
          "match_day"
        ],
        "summary": "Reschedules a matchday"
      }
    },
    "/pitches": {
      "get": {
        "operationId": "getAllPitches",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Array of pitches",
            "schema": {
              "items": {
                "$ref": "#/definitions/pitch"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "pitch"
        ],
        "summary": "Find all pitches"
      },
      "post": {
        "operationId": "createPitch",
        "security": [
          {"JWT": []},
          {"basic-auth": []}
        ],
        "parameters": [
          {
            "in": "body",
            "name": "createPitchBody",
            "schema": {
              "properties": {
                "label": {
                  "type": "string",
                  "minLength": 1,
                  "maxLength": 255
                },
                "location_latitude": {
                  "type": "number",
                  "minimum": -90,
                  "maximum": 90
                },
                "location_longitude": {
                  "type": "number",
                  "minimum": -180,
                  "maximum": 180
                }
              },
              "required": [
                "label",
                "location_latitude",
                "location_longitude"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful",
            "schema": {
              "$ref": "#/definitions/identifier"
            }
          },
          "400": {
            "description": "Indicates an invalid parameter value"
          }
        },
        "tags": [
          "pitch"
        ],
        "summary": "Creates a new pitch"
      }
    },
    "/pitches/{id}": {
      "delete": {
        "operationId": "deletePitch",
        "security": [
          {"JWT": []},
          {"basic-auth": []}
        ],
        "parameters": [
          {
            "description": "pitch id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Deletion successful"
          }
        },
        "tags": [
          "pitch"
        ],
        "summary": "Delete a single pitch"
      },
      "get": {
        "operationId": "getPitch",
        "parameters": [
          {
            "description": "pitch id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Contains a single pitch object",
            "schema": {
              "$ref": "#/definitions/pitch"
            }
          },
          "404": {
            "description": "Pitch could not be found"
          }
        },
        "tags": [
          "pitch"
        ],
        "summary": "Find a single pitch by id"
      }
    },
    "/pitches/{id}/contact": {
      "put": {
        "operationId": "updatePitchContact",
        "security": [
          {"JWT": []},
          {"basic-auth": []}
        ],
        "parameters": [
          {
            "description": "ID of pitch",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "updatePitchContactBody",
            "schema": {
              "$ref": "#/definitions/contact_person"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Pitch contact has been modified successfully"
          },
          "404": {
            "description": "Pitch could not be found"
          }
        },
        "tags": [
          "pitch"
        ],
        "summary": "Updates the contact person of a pitch"
      }
    },
    "/seasons": {
      "get": {
        "operationId": "getAllSeasons",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of seasons",
            "schema": {
              "items": {
                "$ref": "#/definitions/season"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "season"
        ],
        "summary": "Find all seasons"
      },
      "post": {
        "operationId": "createSeason",
        "security": [
          {"JWT": []},
          {"basic-auth": []}
        ],
        "parameters": [
          {
            "in": "body",
            "name": "createSeasonBody",
            "schema": {
              "properties": {
                "name": {
                  "type": "string",
                  "minLength": 1,
                  "maxLength": 255
                }
              },
              "required": [
                "name"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful",
            "schema": {
              "$ref": "#/definitions/identifier"
            }
          },
          "400": {
            "description": "Indicates an invalid value of the name parameter"
          }
        },
        "tags": [
          "season"
        ],
        "summary": "Create a new season"
      }
    },
    "/seasons/{id}": {
      "delete": {
        "operationId": "deleteSeason",
        "security": [
          {"JWT": []},
          {"basic-auth": []}
        ],
        "parameters": [
          {
            "description": "ID of season",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Deletion successful"
          }
        },
        "tags": [
          "season"
        ],
        "summary": "Delete a single season"
      },
      "get": {
        "operationId": "getSeason",
        "parameters": [
          {
            "description": "ID of season",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Contains a single season object",
            "schema": {
              "$ref": "#/definitions/season"
            }
          },
          "404": {
            "description": "Season could not be found"
          }
        },
        "tags": [
          "season"
        ],
        "summary": "Finds a single season"
      }
    },
    "/seasons/{id}/match_days": {
      "get": {
        "operationId": "getMatchDaysInSeason",
        "parameters": [
          {
            "description": "ID of season",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Array of matchdays",
            "schema": {
              "items": {
                "$ref": "#/definitions/match_day"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "season"
        ],
        "summary": "Find season matchdays"
      },
      "post": {
        "operationId": "createMatchDays",
        "security": [
          {"JWT": []},
          {"basic-auth": []}
        ],
        "parameters": [
          {
            "description": "ID of season",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "createMatchDaysBody",
            "schema": {
              "properties": {
                "dates": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/date_period"
                  }
                }
              },
              "required": [
                "dates"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation successful"
          }
        },
        "tags": [
          "season"
        ],
        "summary": "Creates matchdays & matches for a given season"
      }
    },
    "/seasons/{id}/ranking": {
      "get": {
        "operationId": "getRanking",
        "parameters": [
          {
            "description": "ID of season",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Current season ranking",
            "schema": {
              "$ref": "#/definitions/ranking"
            }
          }
        },
        "tags": [
          "season"
        ],
        "summary": "Returns the current season ranking"
      }
    },
    "/seasons/{season_id}/ranking/penalties": {
      "post": {
        "operationId": "createRankingPenalty",
        "security": [
          {"JWT": []},
          {"basic-auth": []}
        ],
        "parameters": [
          {
            "description": "ID of season",
            "in": "path",
            "name": "season_id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "createRankingPenaltyBody",
            "schema": {
              "properties": {
                "reason": {
                  "type": "string",
                  "minLength": 1,
                  "maxLength": 255
                },
                "points": {
                  "type": "integer",
                  "minimum": 1
                },
                "team_id": {
                  "type": "string"
                }
              },
              "required": [
                "name"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful",
            "schema": {
              "$ref": "#/definitions/identifier"
            }
          }
        },
        "tags": [
          "season"
        ],
        "summary": "Creates a ranking penalty for a team"
      }
    },
    "/seasons/{season_id}/ranking/penalties/{penalty_id}": {
      "delete": {
        "operationId": "deleteRankingPenalty",
        "security": [
          {"JWT": []},
          {"basic-auth": []}
        ],
        "parameters": [
          {
            "description": "ID of season",
            "in": "path",
            "name": "season_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "ID of ranking penalty",
            "in": "path",
            "name": "penalty_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Operation successful"
          }
        },
        "tags": [
          "season"
        ],
        "summary": "Deletes a ranking penalty"
      }
    },
    "/seasons/{id}/start": {
      "post": {
        "operationId": "startSeason",
        "security": [
          {"JWT": []},
          {"basic-auth": []}
        ],
        "parameters": [
          {
            "description": "ID of season",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Season has been successfully started"
          },
          "400": {
            "description": "Season cannot be started due to an invalid state"
          },
          "404": {
            "description": "Season could not be found"
          }
        },
        "tags": [
          "season"
        ],
        "summary": "Starts a season"
      }
    },
    "/seasons/{id}/end": {
      "post": {
        "operationId": "endSeason",
        "security": [
          {"JWT": []},
          {"basic-auth": []}
        ],
        "parameters": [
          {
            "description": "ID of season",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Operation successful"
          },
          "400": {
            "description": "Season cannot be ended due to an invalid state"
          },
          "404": {
            "description": "Season could not be found"
          }
        },
        "tags": [
          "season"
        ],
        "summary": "Ends a season"
      }
    },
    "/seasons/{id}/teams": {
      "get": {
        "operationId": "getTeamsInSeason",
        "parameters": [
          {
            "description": "ID of season",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Array of teams related to the season",
            "schema": {
              "items": {
                "$ref": "#/definitions/team"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "season"
        ],
        "summary": "Find all teams related to a single season"
      }
    },
    "/seasons/{season_id}/teams/{team_id}": {
      "put": {
        "operationId": "addTeamToSeason",
        "security": [
          {"JWT": []},
          {"basic-auth": []}
        ],
        "parameters": [
          {
            "description": "ID of season",
            "in": "path",
            "name": "season_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "ID of team",
            "in": "path",
            "name": "team_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Operation successful"
          },
          "400": {
            "description": "Operation not allowed in the current season state"
          },
          "404": {
            "description": "Team or season not found"
          }
        },
        "tags": [
          "season"
        ],
        "summary": "Add a team to a season"
      },
      "delete": {
        "operationId": "removeTeamFromSeason",
        "security": [
          {"JWT": []},
          {"basic-auth": []}
        ],
        "parameters": [
          {
            "description": "ID of season",
            "in": "path",
            "name": "season_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "ID of team",
            "in": "path",
            "name": "team_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Operation successful"
          },
          "400": {
            "description": "Operation not allowed in the current season state"
          },
          "404": {
            "description": "Team or season not found"
          }
        },
        "tags": [
          "season"
        ],
        "summary": "Remove a team from a season"
      }
    },
    "/teams": {
      "get": {
        "operationId": "getAllTeams",
        "parameters": [],
        "responses": {
          "200": {
            "description": "list of teams",
            "schema": {
              "items": {
                "$ref": "#/definitions/team"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "team"
        ],
        "summary": "Finds all teams"
      },
      "post": {
        "operationId": "createTeam",
        "security": [
          {"JWT": []},
          {"basic-auth": []}
        ],
        "parameters": [
          {
            "in": "body",
            "name": "createTeamBody",
            "schema": {
              "properties": {
                "name": {
                  "type": "string",
                  "minLength": 1,
                  "maxLength": 255
                }
              },
              "required": [
                "name"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful",
            "schema": {
              "$ref": "#/definitions/identifier"
            }
          },
          "400": {
            "description": "Invalid team name"
          }
        },
        "tags": [
          "team"
        ],
        "summary": "Creates a new team"
      }
    },
    "/teams/{id}": {
      "delete": {
        "operationId": "deleteTeam",
        "security": [
          {"JWT": []},
          {"basic-auth": []}
        ],
        "parameters": [
          {
            "description": "ID of team",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Deletion successful"
          }
        },
        "tags": [
          "team"
        ],
        "summary": "Delete a single team by id"
      },
      "get": {
        "operationId": "getTeam",
        "parameters": [
          {
            "description": "ID of team",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Single team",
            "schema": {
              "$ref": "#/definitions/team"
            }
          }
        },
        "tags": [
          "team"
        ],
        "summary": "Finds a single team by id"
      }
    },
    "/teams/{id}/contact": {
      "put": {
        "operationId": "updateTeamContact",
        "security": [
          {"JWT": []},
          {"basic-auth": []}
        ],
        "parameters": [
          {
            "description": "ID of team",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "updateTeamContactBody",
            "schema": {
              "$ref": "#/definitions/contact_person"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Team contact has been modified successfully"
          },
          "404": {
            "description": "Team could not be found"
          }
        },
        "tags": [
          "team"
        ],
        "summary": "Updates the contact person of team"
      }
    },
    "/tournaments": {
      "get": {
        "operationId": "getAllTournaments",
        "tags": [
          "tournament"
        ],
        "summary": "Finds all tournaments",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of tournaments",
            "schema": {
              "items": {
                "$ref": "#/definitions/tournament"
              },
              "type": "array"
            }
          }
        }
      },
      "post": {
        "operationId": "createTournament",
        "security": [
          {"JWT": []},
          {"basic-auth": []}
        ],
        "tags": [
          "tournament"
        ],
        "summary": "Creates a new tournament",
        "parameters": [
          {
            "in": "body",
            "name": "createTournamentBody",
            "schema": {
              "properties": {
                "name": {
                  "type": "string",
                  "minLength": 1,
                  "maxLength": 255
                }
              },
              "required": [
                "name"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful",
            "schema": {
              "$ref": "#/definitions/identifier"
            }
          },
          "400": {
            "description": "Invalid tournament name"
          }
        }
      }
    },
    "/tournaments/{id}": {
      "get": {
        "operationId": "getTournament",
        "tags": [
          "tournament"
        ],
        "summary": "Find a single tournament by id",
        "parameters": [
          {
            "description": "ID of tournament",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Single tournament",
            "schema": {
              "$ref": "#/definitions/tournament"
            }
          },
          "404": {
            "description": "Tournament not found"
          }
        }
      },
      "delete": {
        "operationId": "deleteTournament",
        "security": [
          {"JWT": []},
          {"basic-auth": []}
        ],
        "tags": [
          "tournament"
        ],
        "summary": "Delete a single tournament by id",
        "parameters": [
          {
            "description": "ID of tournament",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Operation successful"
          },
          "404": {
            "description": "Tournament not found"
          }
        }
      }
    },
    "/tournaments/{id}/rounds/{round}": {
      "put": {
        "operationId": "setRound",
        "security": [
          {"JWT": []},
          {"basic-auth": []}
        ],
        "tags": [
          "tournament"
        ],
        "summary": "Defines a set of team pairings as a tournament round",
        "parameters": [
          {
            "description": "ID of tournament",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "Number identifying the tournament round",
            "in": "path",
            "name": "round",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "setRoundBody",
            "schema": {
              "type": "object",
              "properties": {
                "team_pairs": {
                  "type": "array",
                  "items": {
                    "properties": {
                      "home_team_id": {
                        "type": "string"
                      },
                      "guest_team_id": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "minItems": 1,
                  "maxItems": 64
                },
                "date_period": {
                  "$ref": "#/definitions/date_period"
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation successful"
          },
          "404": {
            "description": "Tournament or team not found"
          }
        }
      }
    },
    "/tournaments/{id}/rounds": {
      "get": {
        "operationId": "getRoundsInTournament",
        "tags": [
          "tournament"
        ],
        "summary": "Finds all rounds for a tournament",
        "parameters": [
          {
            "description": "ID of tournament",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Array of rounds",
            "schema": {
              "items": {
                "$ref": "#/definitions/match_day"
              },
              "type": "array"
            }
          }
        }
      }
    },
    "/users": {
      "get": {
        "summary": "Find all users",
        "security": [
          {"JWT": []},
          {"basic-auth": []}
        ],
        "operationId": "getAllUsers",
        "tags": ["user"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Array of users"
          }
        }
      },
      "post": {
        "summary": "Create a user",
        "security": [
          {"JWT": []},
          {"basic-auth": []}
        ],
        "operationId": "createUser",
        "tags": ["user"],
        "parameters": [
          {
            "in": "body",
            "name": "createUserBody",
            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string"
                },
                "password": {
                  "type": "string",
                  "minLength": 6,
                  "maxLength": 255
                },
                "teams": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "role": {
                  "type": "string",
                  "enum": ["admin", "team_manager"]
                },
                "first_name": {
                  "type": "string"
                },
                "last_name": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation successful"
          },
          "400": {
            "description": "Invalid user object"
          }
        }
      }
    },
    "/users/me": {
      "get": {
        "summary": "Retrieve the authenticated user",
        "security": [
          {"JWT": []},
          {"basic-auth": []}
        ],
        "operationId": "getAuthenticatedUser",
        "tags": ["user"],
        "responses": {
          "200": {
            "description": "The authenticated user as object",
            "schema": {
              "$ref": "#/definitions/user"
            }
          },
          "401": {
            "description": "Invalid authentication"
          }
        }
      }
    },
    "/users/me/password": {
      "put": {
        "summary": "Change the authenticated user's password",
        "security": [
          {"JWT": []},
          {"basic-auth": []}
        ],
        "operationId": "changePassword",
        "tags": ["user"],
        "parameters": [
          {
            "in": "body",
            "name": "changePasswordBody",
            "schema": {
              "type": "object",
              "properties": {
                "new_password": {
                  "type": "string",
                  "minLength": 6,
                  "maxLength": 255
                }
              },
              "required": [
                "new_password"
              ]
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation successful"
          },
          "401": {
            "description": "Invalid authentication"
          }
        }
      }
    },
    "/users/me/password/reset": {
      "post": {
        "operationId": "sendPasswordResetMail",
        "summary": "Sends a password reset mail for the user with the given email address",
        "tags": ["user"],
        "parameters": [
          {
            "in": "body",
            "name": "sendPasswordResetMailBody",
            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string"
                },
                "target_path": {
                  "type": "string"
                }
              },
              "required": [
                "email",
                "target_path"
              ]
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation successful"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "basic-auth": {
      "type": "basic"
    },
    "JWT": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "definitions": {
    "identifier": {
      "properties": {
        "id": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "match": {
      "properties": {
        "cancelled_at": {
          "format": "date-time",
          "type": "string"
        },
        "cancellation_reason": {
          "type": "string"
        },
        "guest_score": {
          "type": "integer"
        },
        "guest_team_id": {
          "type": "string"
        },
        "home_score": {
          "type": "integer"
        },
        "home_team_id": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "kickoff": {
          "type": "string",
          "format": "date-time"
        },
        "match_day_id": {
          "type": "string"
        },
        "pitch_id": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "pitch": {
      "properties": {
        "id": {
          "type": "string"
        },
        "label": {
          "type": "string"
        },
        "location_latitude": {
          "type": "number"
        },
        "location_longitude": {
          "type": "number"
        },
        "contact": {
          "$ref": "#/definitions/contact_person"
        }
      },
      "type": "object"
    },
    "ranking": {
      "properties": {
        "positions": {
          "items": {
            "$ref": "#/definitions/ranking_position"
          },
          "type": "array"
        },
        "penalties": {
          "items": {
            "$ref": "#/definitions/ranking_penalty"
          },
          "type": "array"
        },
        "season_id": {
          "type": "string"
        },
        "updated_at": {
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ranking_position": {
      "properties": {
        "conceded_goals": {
          "type": "integer"
        },
        "draws": {
          "type": "integer"
        },
        "losses": {
          "type": "integer"
        },
        "matches": {
          "type": "integer"
        },
        "number": {
          "type": "integer"
        },
        "points": {
          "type": "integer"
        },
        "scored_goals": {
          "type": "integer"
        },
        "season_id": {
          "type": "string"
        },
        "sort_index": {
          "type": "integer"
        },
        "team_id": {
          "type": "string"
        },
        "wins": {
          "type": "integer"
        }
      },
      "type": "object"
    },
    "ranking_penalty": {
      "properties": {
        "id": {
          "type": "string"
        },
        "season_id": {
          "type": "string"
        },
        "team_id": {
          "type": "string"
        },
        "reason": {
          "type": "string"
        },
        "points": {
          "type": "integer"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        }
      },
      "type": "object"
    },
    "season": {
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "state": {
          "enum": [
            "preparation",
            "progress",
            "ended"
          ],
          "type": "string"
        },
        "team_count": {
          "type": "integer"
        }
      },
      "type": "object"
    },
    "tournament": {
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "team": {
      "properties": {
        "created_at": {
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "contact": {
          "$ref": "#/definitions/contact_person"
        }
      },
      "type": "object"
    },
    "user": {
      "properties": {
        "id": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "teams": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "role": {
          "type": "string",
          "enum": ["admin", "team_manager"]
        },
        "first_name": {
          "type": "string"
        },
        "last_name": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "contact_person": {
      "properties": {
        "first_name": {
          "type": "string"
        },
        "last_name": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "email": {
          "type": "string"
        }
      }
    },
    "match_day": {
      "properties": {
        "id": {
          "type": "string"
        },
        "number": {
          "type": "integer"
        },
        "start_date": {
          "type": "string",
          "format": "date"
        },
        "end_date": {
          "type": "string",
          "format": "date"
        }
      }
    },
    "date_period": {
      "properties": {
        "from": {
          "type": "string",
          "format": "date"
        },
        "to": {
          "type": "string",
          "format": "date"
        }
      }
    }
  },
  "tags": [
    {
      "name": "team"
    },
    {
      "name": "season"
    },
    {
      "name": "match"
    },
    {
      "name": "pitch"
    },
    {
      "name": "tournament"
    },
    {
      "name": "user"
    }
  ],
  "x-components": {}
}