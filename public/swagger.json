{
  "swagger": "2.0",
  "info": {
    "contact": {
      "email": "marius.klocke@gmail.com",
      "name": "Marius Klocke"
    },
    "description": "RESTful API for managing soccer leagues and illustrating hexagonal architecture",
    "title": "Hexagonal Playground API",
    "version": "0.1"
  },
  "paths": {
    "/api/match/{id}": {
      "get": {
        "operationId": "getMatch",
        "parameters": [
          {
            "description": "match id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Contains a single match object",
            "schema": {
              "$ref": "#/definitions/match"
            }
          },
          "404": {
            "description": "Match could not be found"
          }
        },
        "tags": [
          "match"
        ],
        "summary": "Find a single match by id"
      }
    },
    "/api/match/{id}/cancellation": {
      "post": {
        "operationId": "cancelMatch",
        "parameters": [
          {
            "description": "match id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Operation successful"
          }
        },
        "tags": [
          "match"
        ],
        "summary": "Cancel a match"
      }
    },
    "/api/match/{id}/kickoff": {
      "post": {
        "operationId": "scheduleMatch",
        "parameters": [
          {
            "description": "match id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "scheduleMatchBody",
            "schema": {
              "properties": {
                "kickoff": {
                  "format": "date-time",
                  "type": "string"
                }
              },
              "required": [
                "kickoff"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation successful"
          }
        },
        "tags": [
          "match"
        ],
        "summary": "Schedule a match"
      }
    },
    "/api/match/{id}/location": {
      "post": {
        "operationId": "locateMatch",
        "parameters": [
          {
            "description": "match id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "locateMatchBody",
            "schema": {
              "properties": {
                "pitch_id": {
                  "type": "string"
                }
              },
              "required": [
                "pitch_id"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation successful"
          }
        },
        "tags": [
          "match"
        ],
        "summary": "Locate a match on a pitch"
      }
    },
    "/api/match/{id}/result": {
      "post": {
        "operationId": "submitMatchResult",
        "security": [
          {"JWT": []},
          {"basic-auth": []}
        ],
        "parameters": [
          {
            "description": "match id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "submitMatchResultBody",
            "schema": {
              "properties": {
                "guest_score": {
                  "type": "integer",
                  "minimum": 0,
                  "maximum": 99
                },
                "home_score": {
                  "type": "integer",
                  "minimum": 0,
                  "maximum": 99
                }
              },
              "required": [
                "home_score",
                "guest_score"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation successful"
          }
        },
        "tags": [
          "match"
        ],
        "summary": "Submit a matches result"
      }
    },
    "/api/pitch": {
      "get": {
        "operationId": "getAllPitches",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Array of pitches",
            "schema": {
              "items": {
                "$ref": "#/definitions/pitch"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "pitch"
        ],
        "summary": "Find all pitches"
      },
      "post": {
        "operationId": "createPitch",
        "parameters": [
          {
            "in": "body",
            "name": "createPitchBody",
            "schema": {
              "properties": {
                "label": {
                  "type": "string",
                  "minLength": 1,
                  "maxLength": 255
                }
              },
              "required": [
                "label"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful",
            "schema": {
              "$ref": "#/definitions/identifier"
            }
          },
          "400": {
            "description": "Indicates an invalid value of the label parameter"
          }
        },
        "tags": [
          "pitch"
        ],
        "summary": "Creates a new pitch"
      }
    },
    "/api/pitch/{id}": {
      "delete": {
        "operationId": "deletePitch",
        "parameters": [
          {
            "description": "pitch id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Deletion successful"
          }
        },
        "tags": [
          "pitch"
        ],
        "summary": "Delete a single pitch"
      },
      "get": {
        "operationId": "getPitch",
        "parameters": [
          {
            "description": "pitch id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Contains a single pitch object",
            "schema": {
              "$ref": "#/definitions/pitch"
            }
          },
          "404": {
            "description": "Pitch could not be found"
          }
        },
        "tags": [
          "pitch"
        ],
        "summary": "Find a single pitch by id"
      }
    },
    "/api/season": {
      "get": {
        "operationId": "getAllSeasons",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of seasons",
            "schema": {
              "items": {
                "$ref": "#/definitions/season"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "season"
        ],
        "summary": "Find all seasons"
      },
      "post": {
        "operationId": "createSeason",
        "parameters": [
          {
            "in": "body",
            "name": "createSeasonBody",
            "schema": {
              "properties": {
                "name": {
                  "type": "string",
                  "minLength": 1,
                  "maxLength": 255
                }
              },
              "required": [
                "name"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful",
            "schema": {
              "$ref": "#/definitions/identifier"
            }
          },
          "400": {
            "description": "Indicates an invalid value of the name parameter"
          }
        },
        "tags": [
          "season"
        ],
        "summary": "Create a new season"
      }
    },
    "/api/season/{id}": {
      "delete": {
        "operationId": "deleteSeason",
        "parameters": [
          {
            "description": "ID of season",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Deletion successful"
          }
        },
        "tags": [
          "season"
        ],
        "summary": "Delete a single season"
      },
      "get": {
        "operationId": "getSeason",
        "parameters": [
          {
            "description": "ID of season",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Contains a single season object",
            "schema": {
              "$ref": "#/definitions/season"
            }
          },
          "404": {
            "description": "Season could not be found"
          }
        },
        "tags": [
          "season"
        ],
        "summary": "Finds a single season"
      }
    },
    "/api/season/{id}/matches": {
      "get": {
        "operationId": "getMatchesInSeason",
        "parameters": [
          {
            "description": "ID of season",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "Number identifying the matchday",
            "in": "query",
            "name": "match_day",
            "required": false,
            "type": "integer"
          },
          {
            "in": "query",
            "name": "team_id",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "from",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "to",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Array of matches",
            "schema": {
              "items": {
                "$ref": "#/definitions/match"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "match"
        ],
        "summary": "Find matches"
      },
      "post": {
        "operationId": "createMatches",
        "parameters": [
          {
            "description": "ID of season",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "createMatchesBody",
            "schema": {
              "properties": {
                "start_at": {
                  "type": "string",
                  "format": "date"
                }
              },
              "required": [
                "start_at"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation successful"
          }
        },
        "tags": [
          "match"
        ],
        "summary": "Creates matches for a given season"
      }
    },
    "/api/season/{id}/ranking": {
      "get": {
        "operationId": "getRanking",
        "parameters": [
          {
            "description": "ID of season",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Current season ranking",
            "schema": {
              "$ref": "#/definitions/ranking"
            }
          }
        },
        "tags": [
          "ranking"
        ],
        "summary": "Returns the current season ranking"
      }
    },
    "/api/season/{id}/start": {
      "post": {
        "operationId": "startSeason",
        "parameters": [
          {
            "description": "ID of season",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Season has been successfully started"
          },
          "400": {
            "description": "Season cannot be started due to an invalid state"
          },
          "404": {
            "description": "Season could not be found"
          }
        },
        "tags": [
          "season"
        ],
        "summary": "Starts a season"
      }
    },
    "/api/season/{id}/team": {
      "get": {
        "operationId": "getTeamsInSeason",
        "parameters": [
          {
            "description": "ID of season",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Array of teams related to the season",
            "schema": {
              "items": {
                "$ref": "#/definitions/team"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "team"
        ],
        "summary": "Find all teams related to a single season"
      }
    },
    "/api/season/{season_id}/team/{team_id}": {
      "put": {
        "operationId": "addTeamToSeason",
        "parameters": [
          {
            "description": "ID of season",
            "in": "path",
            "name": "season_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "ID of team",
            "in": "path",
            "name": "team_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Operation successful"
          },
          "400": {
            "description": "Operation not allowed in the current season state"
          },
          "404": {
            "description": "Team or season not found"
          }
        },
        "tags": [
          "season"
        ],
        "summary": "Add a team to a season"
      },
      "delete": {
        "operationId": "removeTeamFromSeason",
        "parameters": [
          {
            "description": "ID of season",
            "in": "path",
            "name": "season_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "ID of team",
            "in": "path",
            "name": "team_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Operation successful"
          },
          "400": {
            "description": "Operation not allowed in the current season state"
          },
          "404": {
            "description": "Team or season not found"
          }
        },
        "tags": [
          "season"
        ],
        "summary": "Remove a team from a season"
      }
    },
    "/api/team": {
      "get": {
        "operationId": "getAllTeams",
        "parameters": [],
        "responses": {
          "200": {
            "description": "list of teams",
            "schema": {
              "items": {
                "$ref": "#/definitions/team"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "team"
        ],
        "summary": "Finds all teams"
      },
      "post": {
        "operationId": "createTeam",
        "parameters": [
          {
            "in": "body",
            "name": "createTeamBody",
            "schema": {
              "properties": {
                "name": {
                  "type": "string",
                  "minLength": 1,
                  "maxLength": 255
                }
              },
              "required": [
                "name"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful",
            "schema": {
              "$ref": "#/definitions/identifier"
            }
          },
          "400": {
            "description": "Invalid team name"
          }
        },
        "tags": [
          "team"
        ],
        "summary": "Creates a new team"
      }
    },
    "/api/team/{id}": {
      "delete": {
        "operationId": "deleteTeam",
        "parameters": [
          {
            "description": "ID of team",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Deletion successful"
          }
        },
        "tags": [
          "team"
        ],
        "summary": "Delete a single team by id"
      },
      "get": {
        "operationId": "getTeam",
        "parameters": [
          {
            "description": "ID of team",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Single team",
            "schema": {
              "$ref": "#/definitions/team"
            }
          }
        },
        "tags": [
          "team"
        ],
        "summary": "Finds a single team by id"
      }
    },
    "/api/team/{id}/rename": {
      "post": {
        "operationId": "renameTeam",
        "parameters": [
          {
            "description": "ID of team",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Team has been successfully renamed"
          },
          "404": {
            "description": "Team could not be found"
          }
        },
        "tags": [
          "team"
        ],
        "summary": "Renames a single team"
      }
    },
    "/api/tournament": {
      "get": {
        "operationId": "getAllTournaments",
        "tags": [
          "tournament"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of tournaments",
            "schema": {
              "items": {
                "$ref": "#/definitions/tournament"
              },
              "type": "array"
            }
          }
        }
      },
      "post": {
        "operationId": "createTournament",
        "tags": [
          "tournament"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "createTournamentBody",
            "schema": {
              "properties": {
                "name": {
                  "type": "string",
                  "minLength": 1,
                  "maxLength": 255
                }
              },
              "required": [
                "name"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful",
            "schema": {
              "$ref": "#/definitions/identifier"
            }
          },
          "400": {
            "description": "Invalid tournament name"
          }
        }
      }
    },
    "/api/tournament/{id}": {
      "get": {
        "operationId": "getTournament",
        "tags": [
          "tournament"
        ],
        "parameters": [
          {
            "description": "ID of tournament",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Single tournament",
            "schema": {
              "$ref": "#/definitions/tournament"
            }
          },
          "404": {
            "description": "Tournament not found"
          }
        }
      }
    },
    "/api/tournament/{id}/round/{round}": {
      "put": {
        "operationId": "setRound",
        "tags": [
          "tournament"
        ],
        "parameters": [
          {
            "description": "ID of tournament",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "Number identifying the tournament round",
            "in": "path",
            "name": "round",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "setRoundBody",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/team_id_tuple"
              },
              "minItems": 1,
              "maxItems": 64
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation successful"
          },
          "404": {
            "description": "Tournament or team not found"
          }
        }
      }
    },
    "/api/tournament/{id}/matches": {
      "get": {
        "operationId": "getMatchesInTournament",
        "tags": [
          "tournament"
        ],
        "parameters": [
          {
            "description": "ID of tournament",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Array of matches",
            "schema": {
              "items": {
                "$ref": "#/definitions/match"
              },
              "type": "array"
            }
          }
        }
      }
    },
    "/api/user/me": {
      "get": {
        "summary": "Retrieve the authenticated user",
        "security": [
          {"JWT": []},
          {"basic-auth": []}
        ],
        "operationId": "getAuthenticatedUser",
        "tags": ["user"],
        "responses": {
          "200": {
            "description": "The authenticated user as object",
            "schema": {
              "$ref": "#/definitions/user"
            }
          },
          "401": {
            "description": "Invalid authentication"
          }
        }
      }
    },
    "/api/user/me/password": {
      "put": {
        "summary": "Change the authenticated user's password",
        "security": [
          {"basic-auth": []}
        ],
        "operationId": "changePassword",
        "tags": ["user"],
        "parameters": [
          {
            "in": "body",
            "name": "changePasswordBody",
            "schema": {
              "type": "object",
              "properties": {
                "new_password": {
                  "type": "string",
                  "minLength": 6,
                  "maxLength": 255
                }
              },
              "required": [
                "new_password"
              ]
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation successful"
          },
          "401": {
            "description": "Invalid authentication"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "basic-auth": {
      "type": "basic"
    },
    "JWT": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "definitions": {
    "identifier": {
      "properties": {
        "id": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "match": {
      "properties": {
        "cancelled_at": {
          "format": "date-time",
          "type": "string"
        },
        "guest_score": {
          "type": "integer"
        },
        "guest_team_id": {
          "type": "string"
        },
        "home_score": {
          "type": "integer"
        },
        "home_team_id": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "kickoff": {
          "type": "string",
          "format": "date-time"
        },
        "match_day": {
          "type": "integer"
        },
        "pitch_id": {
          "type": "string"
        },
        "planned_for": {
          "type": "string",
          "format": "date"
        },
        "season_id": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "pitch": {
      "properties": {
        "id": {
          "type": "string"
        },
        "label": {
          "type": "string"
        },
        "location_latitude": {
          "type": "number"
        },
        "location_longitude": {
          "type": "number"
        }
      },
      "type": "object"
    },
    "ranking": {
      "properties": {
        "positions": {
          "items": {
            "$ref": "#/definitions/ranking_position"
          },
          "type": "array"
        },
        "season_id": {
          "type": "string"
        },
        "updated_at": {
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ranking_position": {
      "properties": {
        "conceded_goals": {
          "type": "integer"
        },
        "draws": {
          "type": "integer"
        },
        "losses": {
          "type": "integer"
        },
        "matches": {
          "type": "integer"
        },
        "number": {
          "type": "integer"
        },
        "points": {
          "type": "integer"
        },
        "scored_goals": {
          "type": "integer"
        },
        "season_id": {
          "type": "string"
        },
        "sort_index": {
          "type": "integer"
        },
        "team_id": {
          "type": "string"
        },
        "wins": {
          "type": "integer"
        }
      },
      "type": "object"
    },
    "season": {
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "state": {
          "enum": [
            "preparation",
            "progress",
            "ended"
          ],
          "type": "string"
        },
        "match_day_count": {
          "type": "integer"
        },
        "team_count": {
          "type": "integer"
        }
      },
      "type": "object"
    },
    "tournament": {
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "rounds": {
          "type": "integer"
        }
      },
      "type": "object"
    },
    "team": {
      "properties": {
        "created_at": {
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "team_id_tuple": {
      "properties": {
        "home_team_id": {
          "type": "string"
        },
        "guest_team_id": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "user": {
      "properties": {
        "id": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "teams": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "type": "object"
    }
  },
  "tags": [
    {
      "name": "team"
    },
    {
      "name": "season"
    },
    {
      "name": "ranking"
    },
    {
      "name": "match"
    },
    {
      "name": "pitch"
    },
    {
      "name": "tournament"
    },
    {
      "name": "user"
    }
  ],
  "x-components": {}
}