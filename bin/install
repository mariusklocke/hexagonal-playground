#!/usr/bin/env php
<?php
declare(strict_types=1);

$installer = new class {

    /** @var array */
    private $tools = [
        'bin/composer.phar' => 'https://github.com/composer/composer/releases/download/1.9.1/composer.phar',
        'bin/phpunit.phar' => 'https://phar.phpunit.de/phpunit-8.4.3.phar',
        'bin/php-coveralls.phar' => 'https://github.com/php-coveralls/php-coveralls/releases/download/v2.2.0/php-coveralls.phar',
        'bin/deptrac.phar' => 'https://github.com/sensiolabs-de/deptrac/releases/download/0.6.0/deptrac.phar'
    ];

    public function __invoke(): void
    {
        $this->output('Installing PHAR dependencies ...');

        foreach ($this->tools as $target => $source) {
            if (file_exists($target)) {
                continue;
            }

            $this->installTool($target, $source);
        }

        $this->output('Installing composer dependencies ...');
        $this->installComposerDeps();
    }

    private function output(string $message): void
    {
        echo $message . PHP_EOL;
    }

    private function installTool(string $target, string $source): void
    {
        $this->output(sprintf('Installing %s ...', $target));
        $result = stream_copy_to_stream(
            fopen($source, 'r'),
            fopen($target, 'w')
        );
        if (false === $result) {
            throw new RuntimeException(sprintf('Failed to install %s', $target));
        }
        chmod($target, 0755);
    }

    private function installComposerDeps(): void
    {
        system(
            'composer.phar install --prefer-dist --no-dev --optimize-autoloader --no-cache --no-progress',
            $exitCode
        );

        if ($exitCode !== 0) {
            throw new RuntimeException('Failed to install composer dependencies. Code: ' . $exitCode);
        }
    }
};

$installer();
